
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> get.projection.matrix <- function(mean.sample.sizes){
+ 	k <- length(mean.sample.sizes)
+ 	transformation.matrix <- get.transformation.matrix(mean.sample.sizes)
+ 	qr.transformation.matrix <- qr(t(transformation.matrix))
+ 	projection.matrix <- qr.Q(qr.transformation.matrix)[,1:qr.transformation.matrix$rank]
+ 	stopifnot(qr.transformation.matrix$rank == sum(abs(eigen(transformation.matrix)$values - 1) < 1e-2) )
+ 	return(projection.matrix)
+ }
> 
> get.transformation.matrix <- function(mean.sample.sizes){
+ 	k <- length(mean.sample.sizes)
+ 	transformation.matrix <- diag(k) - matrix(mean.sample.sizes/sum(mean.sample.sizes),nrow=k,ncol=k,byrow=TRUE)
+ 	return(transformation.matrix)
+ }
> 
> project.sample.covariance <- function(sample.covariance,proj.mat){
+ 	proj.samp.cov <- t(proj.mat) %*% sample.covariance %*% proj.mat
+ 	return(proj.samp.cov)
+ }
> 
> get.norm.factor <- function(freqs,n.loci,sample.sizes){
+ 	pseudo.freqs <- rbind(freqs,rep(0.5,n.loci))	
+ 	if(class(sample.sizes)=="matrix"){
+ 		sample.sizes <- rbind(sample.sizes,rep(1,n.loci))
+ 		sum.sample.sizes <- colSums(sample.sizes)
+ 		pseudo.means <- sapply(1:n.loci,
+ 							function(i){
+ 								sum(
+ 									(pseudo.freqs[,i] * sample.sizes[,i]) / 
+ 										sum.sample.sizes[i],na.rm=TRUE)
+ 							}
+ 						)
+ 	} else {
+ 		sample.sizes <- c(sample.sizes,1)
+ 		sum.sample.sizes <- sum(sample.sizes)
+ 		pseudo.means <- apply(pseudo.freqs,2,
+ 							function(x){
+ 								sum(
+ 									(x * c(sample.sizes,1)) / 
+ 										sum.sample.sizes,na.rm=TRUE)
+ 							}
+ 						)
+ 	}
+ 	norm.factor <- sqrt(pseudo.means * (1-pseudo.means))
+ 	norm.factor <- matrix(norm.factor,nrow=nrow(freqs),ncol=n.loci,byrow=TRUE)
+ 	return(norm.factor)
+ }
> 
> get.mean.freqs <- function(freqs,n.loci,sample.sizes){
+ 	if(class(sample.sizes)=="matrix"){
+ 		sum.sample.sizes <- colSums(sample.sizes)
+ 		mean.freqs <- matrix(
+ 						sapply(1:n.loci,
+ 								function(i){
+ 									sum((freqs[,i] * sample.sizes[,i]) / 
+ 										sum.sample.sizes[i],na.rm=TRUE)
+ 								}
+ 						),
+ 					  nrow=nrow(freqs),ncol=n.loci,byrow=TRUE)
+ 	} else {
+ 		sum.sample.sizes <- sum(sample.sizes)		
+ 		mean.freqs <- matrix(
+ 						apply(freqs,2,
+ 								function(x){
+ 									sum((x * sample.sizes) / 
+ 										sum.sample.sizes,na.rm=TRUE)
+ 								}
+ 						),nrow=nrow(freqs),ncol=n.loci,byrow=TRUE)
+ 	}
+ 	return(mean.freqs)
+ }
> 	
> stdize.freqs <- function(freqs,n.loci,sample.sizes){
+ 	norm.factor <- get.norm.factor(freqs,n.loci,sample.sizes)
+ 	mean.freqs <- get.mean.freqs(freqs,n.loci,sample.sizes)
+ 	mc.freqs <- freqs-mean.freqs
+ 	norm.freqs <- freqs/norm.factor
+ 	std.freqs <- (freqs-mean.freqs)/norm.factor
+ 	stdized.freqs <- list("std.freqs" = std.freqs,
+ 							"norm.freqs" = norm.freqs)
+ 	return(stdized.freqs)
+ }
> 
> stdize.cov <- function(stdized.freqs,proj.mat){
+ 	norm.cov <- cov(t(stdized.freqs$norm.freqs),use="pairwise.complete.obs")
+ 	std.cov <- cov(t(stdized.freqs$std.freqs),use="pairwise.complete.obs")
+ 	proj.std.cov <- project.sample.covariance(std.cov,proj.mat)
+ 	stdized.cov <- list("norm.cov" = norm.cov,
+ 						"std.cov" = std.cov,
+ 						"proj.std.cov" = proj.std.cov)
+ 	return(stdized.cov)
+ }
> 
> process.freq.data <- function(freqs,sample.sizes){
+ 	invars <- apply(freqs,2,function(x){length(unique(x)) == 1})
+ 	freqs <- freqs[,!invars]
+ 	sample.sizes <- sample.sizes[,!invars]
+ 	mean.sample.sizes <- rowMeans(sample.sizes)
+ 	n.loci <- ncol(freqs)
+ 	proj.mat <- get.projection.matrix(mean.sample.sizes)
+ 	stdized.freqs <- stdize.freqs(freqs,n.loci,sample.sizes)
+ 	stdized.cov <- stdize.cov(stdized.freqs,proj.mat)
+ 	obsSigma <- stdized.cov$proj.std.cov
+ 	processed.freq.data <- list("sample.sizes" = mean.sample.sizes,
+ 								"freqs" = freqs,
+ 								"stdized.freqs" = stdized.freqs,
+ 								"stdized.cov" = stdized.cov,
+ 								"obsSigma" = obsSigma,
+ 								"projMat" = proj.mat)
+ 	return(processed.freq.data)
+ }
> 
> viz.output <- function(n.chains,data.block,model.fit,processed.freq.data,sim.dataset){
+ 	output <- lapply(1:n.chains,
+ 						function(i){
+ 							viz.chain.output(i,data.block,model.fit,processed.freq.data,sim.dataset)
+ 						})
+ 	return(output)
+ }
> 
> viz.chain.output <- function(chain.no,data.block,model.fit,processed.freq.data,sim.dataset){
+ 	#recover()
+ 	best <- which.max(get_logposterior(model.fit,inc_warmup=TRUE)[[chain.no]])
+ 	proj.cov <- geoStructure::get.proj.par.cov(model.fit,chain.no,data.block$N)[best,,]
+ 	Z <- extract(model.fit,"sourceCoords",permute=FALSE,inc_warmup=TRUE)[,chain.no,]
+ 	allDist <- fields::rdist(sim.dataset$data.list$coords)
+ 	tmat <- get.transformation.matrix(rowMeans(sim.dataset$data.list$sample.sizes))
+ 	par.cov <- geoStructure::get.par.cov(model.fit,chain.no,data.block$N)[best,,]
+ 	pdf(file=paste0("fit_ch",chain.no,".pdf",sep=""),width=9,height=8)
+ 		par(mar=c(2,2,2,2))
+ 		layout(mat=matrix(c(1,2,3,4),nrow=2,ncol=2,byrow=TRUE))
+ 		plot(data.block$obsSigma, proj.cov,pch=20,
+ 				xlab="observed covariance",
+ 				ylab="parametric fit")
+ 			abline(0,1,col=2)
+ 		plot(allDist,processed.freq.data$stdized.cov$std.cov,col="purple",cex=1.5)
+ 			points(data.block$pDist,
+ 					processed.freq.data$stdized.cov$std.cov[1:data.block$nP,1:data.block$nP],
+ 					col="blue",pch=20,cex=1.5)
+ 			points(data.block$dDist,
+ 					processed.freq.data$stdized.cov$std.cov[(data.block$nP+1):data.block$N,(data.block$nP+1):data.block$N],
+ 					col="red",pch=20,cex=1.5)
+ 			points(allDist,tmat %*% par.cov %*% t(tmat),col=1,pch=20,,cex=0.8)
+ 		posterior <- get_logposterior(model.fit,inc_warmup=TRUE)[[chain.no]]
+ 		n.iter <- length(posterior)
+ 		plot(posterior[(n.iter/2+1):n.iter],type='l')
+ 		plot(data.block$pCoords,pch=19,cex=4,col="blue",
+ 				ylim=range(data.block$pCoords[,2],data.block$dCoords[,2],Z[,2])+c(-0.5,0.5),
+ 				xlim=range(data.block$pCoords[,1],data.block$dCoords[,1],Z[,1])+c(-0.5,0.5))
+ 			text(data.block$pCoords,labels=1:nrow(data.block$pCoords),col="white")
+ 			points(data.block$dCoords+c(0.1,0.1),col="red",cex=4,pch=19)
+ 			text(data.block$dCoords+c(0.1,0.1),labels=1:nrow(data.block$dCoords),col="black")
+ 				points(sim.dataset$data.list$coords[sim.dataset$par.list$daughter.source,,drop=FALSE],col="green",pch=1,cex=5)
+ 			points(Z,col=adjustcolor(1,0.1),pch=20)
+ 	dev.off()
+ 	output <- list("best" = best,
+ 				   "proj.cov" = proj.cov,
+ 				   "Z" = Z,
+ 				   "allDist" = allDist,
+ 				   "tmat" = tmat,
+ 				   "par.cov" = par.cov,
+ 				   "posterior" = posterior)
+ 	return(output)
+ }
> 
> set.sp.param.limits <- function(param){
+ 	lim <- abs(diff(range(param)))/10
+ 	return(lim)
+ }
> 
> make.data.block <- function(pCoords,dCoords,processed.freq.data,earth=FALSE){
+ 	if(earth){
+ 		pDist <- fields::rdist.earth(pCoords)
+ 		dDist <- fields::rdist.earth(dCoords)
+ 	} else {
+ 		pDist <- fields::rdist(pCoords)
+ 		dDist <- fields::rdist(dCoords)
+ 	}
+ 	# pDist <- pDist/sd(c(pDist,dDist))
+ 	# dDist <- dDist/sd(c(pDist,dDist))
+ 	data.block <- list("N" = nrow(pCoords) + nrow(dCoords),
+ 					   "nP" = nrow(pCoords),
+ 					   "nD" = nrow(dCoords),
+ 					   "L" = ncol(processed.freq.data$freqs),
+ 					   "obsSigma" = processed.freq.data$obsSigma,
+ 					   "pCoords" = pCoords,
+ 					   "dCoords" = dCoords,
+ 					   "pDist" = pDist,
+ 					   "dDist" = dDist,
+ 					   "projMat" = processed.freq.data$projMat,
+ 					   "pCentroid" = colMeans(pCoords),
+ 					   "sCoordPrVar" = matrix(c(sd(pDist),0,0,sd(pDist)),nrow=2,ncol=2,byrow=TRUE),
+ 					   "xLow" = min(pCoords[,1]) - set.sp.param.limits(pCoords[,1]),
+ 					   "xHigh" = max(pCoords[,1]) + set.sp.param.limits(pCoords[,1]),
+ 					   "yLow" = min(pCoords[,2]) + set.sp.param.limits(pCoords[,2]),
+ 					   "yHigh" = max(pCoords[,2]) + set.sp.param.limits(pCoords[,2]))
+ 	return(data.block)
+ }
> 
> 
> source("~/Dropbox/spaceCHIMP/code/spaceCHIMP.R")
> require(rstan)
Loading required package: rstan
Loading required package: ggplot2
Loading required package: StanHeaders
rstan (Version 2.14.1, packaged: 2016-12-28 14:55:41 UTC, GitRev: 5fa1e80eb817)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
> load(list.files(pattern="dataset.Robj"))
> 
> processed.freq.data <- process.freq.data(sim.dataset$data.list$allele.freqs,
+ 										 sim.dataset$data.list$sample.sizes)
> data.block <- make.data.block(pCoords = sim.dataset$data.list$pd.coords[["parental"]],
+ 							  dCoords = sim.dataset$data.list$pd.coords[["daughter"]],
+ 							  processed.freq.data = processed.freq.data,
+ 							  earth=FALSE)
> 
> 	
> model.fit <- stan(model_code=model.block,
+ 				  data=data.block,
+ 				  refresh=1e2,
+ 				  chains=2,
+ 				  iter=5e3,
+ 				  thin=5e3/500)
DIAGNOSTIC(S) FROM PARSER:
WARNING: left-hand side variable (name=Sigma) occurs on right-hand side of assignment, causing inefficient deep copy to avoid aliasing.
Warning (non-fatal):
Left-hand side of sampling statement (~) may contain a non-linear transform of a parameter or local variable.
If it does, you need to include a target += statement with the log absolute determinant of the Jacobian of the transform.
Left-hand-side of sampling statement:
    sourceCoords[1] ~ multi_normal(...)

In file included from file115a622d6c27d.cpp:8:
In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/src/stan/model/model_header.hpp:4:
In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math.hpp:4:
In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/rev/mat.hpp:4:
In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/rev/core.hpp:12:
In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/rev/core/gevv_vvv_vari.hpp:5:
In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/rev/core/var.hpp:7:
In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/BH/include/boost/math/tools/config.hpp:13:
In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/BH/include/boost/config.hpp:39:
/Library/Frameworks/R.framework/Versions/3.3/Resources/library/BH/include/boost/config/compiler/clang.hpp:196:11: warning: 'BOOST_NO_CXX11_RVALUE_REFERENCES' macro redefined [-Wmacro-redefined]
#  define BOOST_NO_CXX11_RVALUE_REFERENCES
          ^
<command line>:6:9: note: previous definition is here
#define BOOST_NO_CXX11_RVALUE_REFERENCES 1
        ^
1 warning generated.

SAMPLING FOR MODEL '8f3f996ef29990f8ca8e9ccdd67658d1' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 5000 [  0%]  (Warmup)
Chain 1, Iteration:  100 / 5000 [  2%]  (Warmup)
Chain 1, Iteration:  200 / 5000 [  4%]  (Warmup)
Chain 1, Iteration:  300 / 5000 [  6%]  (Warmup)
Chain 1, Iteration:  400 / 5000 [  8%]  (Warmup)
Chain 1, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 1, Iteration:  600 / 5000 [ 12%]  (Warmup)
Chain 1, Iteration:  700 / 5000 [ 14%]  (Warmup)
Chain 1, Iteration:  800 / 5000 [ 16%]  (Warmup)
Chain 1, Iteration:  900 / 5000 [ 18%]  (Warmup)
Chain 1, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 1, Iteration: 1100 / 5000 [ 22%]  (Warmup)
Chain 1, Iteration: 1200 / 5000 [ 24%]  (Warmup)
Chain 1, Iteration: 1300 / 5000 [ 26%]  (Warmup)
Chain 1, Iteration: 1400 / 5000 [ 28%]  (Warmup)
Chain 1, Iteration: 1500 / 5000 [ 30%]  (Warmup)
Chain 1, Iteration: 1600 / 5000 [ 32%]  (Warmup)
Chain 1, Iteration: 1700 / 5000 [ 34%]  (Warmup)
Chain 1, Iteration: 1800 / 5000 [ 36%]  (Warmup)
Chain 1, Iteration: 1900 / 5000 [ 38%]  (Warmup)
Chain 1, Iteration: 2000 / 5000 [ 40%]  (Warmup)
Chain 1, Iteration: 2100 / 5000 [ 42%]  (Warmup)
Chain 1, Iteration: 2200 / 5000 [ 44%]  (Warmup)
Chain 1, Iteration: 2300 / 5000 [ 46%]  (Warmup)
Chain 1, Iteration: 2400 / 5000 [ 48%]  (Warmup)
Chain 1, Iteration: 2500 / 5000 [ 50%]  (Warmup)
Chain 1, Iteration: 2501 / 5000 [ 50%]  (Sampling)
Chain 1, Iteration: 2600 / 5000 [ 52%]  (Sampling)
Chain 1, Iteration: 2700 / 5000 [ 54%]  (Sampling)
Chain 1, Iteration: 2800 / 5000 [ 56%]  (Sampling)
Chain 1, Iteration: 2900 / 5000 [ 58%]  (Sampling)
Chain 1, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 1, Iteration: 3100 / 5000 [ 62%]  (Sampling)
Chain 1, Iteration: 3200 / 5000 [ 64%]  (Sampling)
Chain 1, Iteration: 3300 / 5000 [ 66%]  (Sampling)
Chain 1, Iteration: 3400 / 5000 [ 68%]  (Sampling)
Chain 1, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 1, Iteration: 3600 / 5000 [ 72%]  (Sampling)
Chain 1, Iteration: 3700 / 5000 [ 74%]  (Sampling)
Chain 1, Iteration: 3800 / 5000 [ 76%]  (Sampling)
Chain 1, Iteration: 3900 / 5000 [ 78%]  (Sampling)
Chain 1, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 1, Iteration: 4100 / 5000 [ 82%]  (Sampling)
Chain 1, Iteration: 4200 / 5000 [ 84%]  (Sampling)
Chain 1, Iteration: 4300 / 5000 [ 86%]  (Sampling)
Chain 1, Iteration: 4400 / 5000 [ 88%]  (Sampling)
Chain 1, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 1, Iteration: 4600 / 5000 [ 92%]  (Sampling)
Chain 1, Iteration: 4700 / 5000 [ 94%]  (Sampling)
Chain 1, Iteration: 4800 / 5000 [ 96%]  (Sampling)
Chain 1, Iteration: 4900 / 5000 [ 98%]  (Sampling)
Chain 1, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 141.139 seconds (Warm-up)
               164.197 seconds (Sampling)
               305.336 seconds (Total)

The following numerical problems occured the indicated number of times on chain 1
                                                                                                     count
Exception thrown at line 93: wishart_log: LDLT_Factor of scale parameter is not positive definite. l     2
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, do not ask about this message on stan-users.

SAMPLING FOR MODEL '8f3f996ef29990f8ca8e9ccdd67658d1' NOW (CHAIN 2).

Chain 2, Iteration:    1 / 5000 [  0%]  (Warmup)
Chain 2, Iteration:  100 / 5000 [  2%]  (Warmup)
Chain 2, Iteration:  200 / 5000 [  4%]  (Warmup)
Chain 2, Iteration:  300 / 5000 [  6%]  (Warmup)
Chain 2, Iteration:  400 / 5000 [  8%]  (Warmup)
Chain 2, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 2, Iteration:  600 / 5000 [ 12%]  (Warmup)
Chain 2, Iteration:  700 / 5000 [ 14%]  (Warmup)
Chain 2, Iteration:  800 / 5000 [ 16%]  (Warmup)
Chain 2, Iteration:  900 / 5000 [ 18%]  (Warmup)
Chain 2, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 2, Iteration: 1100 / 5000 [ 22%]  (Warmup)
Chain 2, Iteration: 1200 / 5000 [ 24%]  (Warmup)
Chain 2, Iteration: 1300 / 5000 [ 26%]  (Warmup)
Chain 2, Iteration: 1400 / 5000 [ 28%]  (Warmup)
Chain 2, Iteration: 1500 / 5000 [ 30%]  (Warmup)
Chain 2, Iteration: 1600 / 5000 [ 32%]  (Warmup)
Chain 2, Iteration: 1700 / 5000 [ 34%]  (Warmup)
Chain 2, Iteration: 1800 / 5000 [ 36%]  (Warmup)
Chain 2, Iteration: 1900 / 5000 [ 38%]  (Warmup)
Chain 2, Iteration: 2000 / 5000 [ 40%]  (Warmup)
Chain 2, Iteration: 2100 / 5000 [ 42%]  (Warmup)
Chain 2, Iteration: 2200 / 5000 [ 44%]  (Warmup)
Chain 2, Iteration: 2300 / 5000 [ 46%]  (Warmup)
Chain 2, Iteration: 2400 / 5000 [ 48%]  (Warmup)
Chain 2, Iteration: 2500 / 5000 [ 50%]  (Warmup)
Chain 2, Iteration: 2501 / 5000 [ 50%]  (Sampling)
Chain 2, Iteration: 2600 / 5000 [ 52%]  (Sampling)
Chain 2, Iteration: 2700 / 5000 [ 54%]  (Sampling)
Chain 2, Iteration: 2800 / 5000 [ 56%]  (Sampling)
Chain 2, Iteration: 2900 / 5000 [ 58%]  (Sampling)
Chain 2, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 2, Iteration: 3100 / 5000 [ 62%]  (Sampling)
Chain 2, Iteration: 3200 / 5000 [ 64%]  (Sampling)
Chain 2, Iteration: 3300 / 5000 [ 66%]  (Sampling)
Chain 2, Iteration: 3400 / 5000 [ 68%]  (Sampling)
Chain 2, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 2, Iteration: 3600 / 5000 [ 72%]  (Sampling)
Chain 2, Iteration: 3700 / 5000 [ 74%]  (Sampling)
Chain 2, Iteration: 3800 / 5000 [ 76%]  (Sampling)
Chain 2, Iteration: 3900 / 5000 [ 78%]  (Sampling)
Chain 2, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 2, Iteration: 4100 / 5000 [ 82%]  (Sampling)
Chain 2, Iteration: 4200 / 5000 [ 84%]  (Sampling)
Chain 2, Iteration: 4300 / 5000 [ 86%]  (Sampling)
Chain 2, Iteration: 4400 / 5000 [ 88%]  (Sampling)
Chain 2, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 2, Iteration: 4600 / 5000 [ 92%]  (Sampling)
Chain 2, Iteration: 4700 / 5000 [ 94%]  (Sampling)
Chain 2, Iteration: 4800 / 5000 [ 96%]  (Sampling)
Chain 2, Iteration: 4900 / 5000 [ 98%]  (Sampling)
Chain 2, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 111.377 seconds (Warm-up)
               162.85 seconds (Sampling)
               274.228 seconds (Total)

The following numerical problems occured the indicated number of times on chain 2
                                                                                                     count
Exception thrown at line 93: wishart_log: LDLT_Factor of scale parameter is not positive definite. l     4
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected
If the number in the 'count' column is small, do not ask about this message on stan-users.
> output <- viz.output(2,data.block,model.fit,processed.freq.data,sim.dataset)
> save(data.block,model.fit,processed.freq.data,output,file="output.Robj")
> 
> 
> proc.time()
   user  system elapsed 
605.648   4.476 622.401 
